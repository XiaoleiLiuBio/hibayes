// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BayesRR
Rcpp::List BayesRR(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const Nullable<CharacterMatrix> R, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesRR(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP RSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Nullable<CharacterMatrix> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesRR(y, X, C, R, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesA
Rcpp::List BayesA(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesA(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesA(y, X, C, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesBpi
Rcpp::List BayesBpi(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_BayesBpi(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesBpi(y, X, C, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesB
Rcpp::List BayesB(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesB(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesB(y, X, C, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesCpi
Rcpp::List BayesCpi(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_BayesCpi(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesCpi(y, X, C, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesC
Rcpp::List BayesC(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesC(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesC(y, X, C, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesLASSO
Rcpp::List BayesLASSO(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesLASSO(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesLASSO(y, X, C, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesR
Rcpp::List BayesR(const NumericVector& y, const NumericMatrix& X, const Nullable<NumericMatrix> C, const Nullable<NumericVector> pi, const Nullable<NumericVector> fold, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_BayesR(SEXP ySEXP, SEXP XSEXP, SEXP CSEXP, SEXP piSEXP, SEXP foldSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix> >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesR(y, X, C, pi, fold, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesRR_den
Rcpp::List SBayesRR_den(const NumericMatrix sumstat, const NumericMatrix ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesRR_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesRR_den(sumstat, ldm, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesA_den
Rcpp::List SBayesA_den(const NumericMatrix sumstat, const NumericMatrix ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesA_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesA_den(sumstat, ldm, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesBpi_den
Rcpp::List SBayesBpi_den(const NumericMatrix sumstat, const NumericMatrix ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesBpi_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesBpi_den(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesB_den
Rcpp::List SBayesB_den(const NumericMatrix sumstat, const NumericMatrix ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesB_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesB_den(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesCpi_den
Rcpp::List SBayesCpi_den(const NumericMatrix sumstat, const NumericMatrix ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesCpi_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesCpi_den(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesC_den
Rcpp::List SBayesC_den(const NumericMatrix sumstat, const NumericMatrix ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesC_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesC_den(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesLASSO_den
Rcpp::List SBayesLASSO_den(const NumericMatrix sumstat, const NumericMatrix ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesLASSO_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesLASSO_den(sumstat, ldm, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesR_den
Rcpp::List SBayesR_den(const NumericMatrix sumstat, const NumericMatrix ldm, const Nullable<NumericVector> pi, const Nullable<NumericVector> fold, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesR_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP foldSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesR_den(sumstat, ldm, pi, fold, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesRR_spa
Rcpp::List SBayesRR_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesRR_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesRR_spa(sumstat, ldm, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesA_spa
Rcpp::List SBayesA_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesA_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesA_spa(sumstat, ldm, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesBpi_spa
Rcpp::List SBayesBpi_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesBpi_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesBpi_spa(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesB_spa
Rcpp::List SBayesB_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesB_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesB_spa(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesCpi_spa
Rcpp::List SBayesCpi_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesCpi_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesCpi_spa(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesC_spa
Rcpp::List SBayesC_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesC_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesC_spa(sumstat, ldm, pi, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesLASSO_spa
Rcpp::List SBayesLASSO_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesLASSO_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesLASSO_spa(sumstat, ldm, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesR_spa
Rcpp::List SBayesR_spa(const NumericMatrix sumstat, const arma::sp_mat& ldm, const Nullable<NumericVector> pi, const Nullable<NumericVector> fold, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vg, const Nullable<double> dfvg, const Nullable<double> s2vg, const Nullable<double> ve, const Nullable<double> dfve, const Nullable<double> s2ve, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesR_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP foldSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP vgSEXP, SEXP dfvgSEXP, SEXP s2vgSEXP, SEXP veSEXP, SEXP dfveSEXP, SEXP s2veSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vg(vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvg(dfvgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vg(s2vgSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type ve(veSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfve(dfveSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2ve(s2veSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesR_spa(sumstat, ldm, pi, fold, niter, nburn, windindx, wppa, vg, dfvg, s2vg, ve, dfve, s2ve, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// conjgt_spa
Rcpp::List conjgt_spa(const NumericMatrix sumstat, const arma::sp_mat ldm, const Nullable<NumericVector> lambda, const double esp, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_conjgt_spa(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP lambdaSEXP, SEXP espSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type esp(espSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(conjgt_spa(sumstat, ldm, lambda, esp, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// conjgt_den
Rcpp::List conjgt_den(const NumericMatrix sumstat, const arma::mat ldm, const Nullable<NumericVector> lambda, const double esp, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_conjgt_den(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP lambdaSEXP, SEXP espSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type esp(espSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(conjgt_den(sumstat, ldm, lambda, esp, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cutwind
arma::vec cutwind(const arma::vec& chr, const arma::vec& pos, double bp);
RcppExport SEXP _hibayes_cutwind(SEXP chrSEXP, SEXP posSEXP, SEXP bpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type bp(bpSEXP);
    rcpp_result_gen = Rcpp::wrap(cutwind(chr, pos, bp));
    return rcpp_result_gen;
END_RCPP
}
// rMap_c
List rMap_c(std::string map_file, const Nullable<std::string> out);
RcppExport SEXP _hibayes_rMap_c(SEXP map_fileSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type map_file(map_fileSEXP);
    Rcpp::traits::input_parameter< const Nullable<std::string> >::type out(outSEXP);
    rcpp_result_gen = Rcpp::wrap(rMap_c(map_file, out));
    return rcpp_result_gen;
END_RCPP
}
// read_bed
void read_bed(std::string bfile, const SEXP pBigMat, const long maxLine, const bool impt, const bool d, const int threads);
RcppExport SEXP _hibayes_read_bed(SEXP bfileSEXP, SEXP pBigMatSEXP, SEXP maxLineSEXP, SEXP imptSEXP, SEXP dSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bfile(bfileSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const long >::type maxLine(maxLineSEXP);
    Rcpp::traits::input_parameter< const bool >::type impt(imptSEXP);
    Rcpp::traits::input_parameter< const bool >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    read_bed(bfile, pBigMat, maxLine, impt, d, threads);
    return R_NilValue;
END_RCPP
}
// BigStat
SEXP BigStat(SEXP pBigMat, const int threads);
RcppExport SEXP _hibayes_BigStat(SEXP pBigMatSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(BigStat(pBigMat, threads));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Geno
SEXP tXXmat_Geno(SEXP pBigMat, const Nullable<double> chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Geno(SEXP pBigMatSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Geno(pBigMat, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Geno_gwas
SEXP tXXmat_Geno_gwas(SEXP pBigMat, SEXP gwasgeno, const LogicalVector refindx, const NumericVector gwasindx, const Nullable<double> chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Geno_gwas(SEXP pBigMatSEXP, SEXP gwasgenoSEXP, SEXP refindxSEXP, SEXP gwasindxSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gwasgeno(gwasgenoSEXP);
    Rcpp::traits::input_parameter< const LogicalVector >::type refindx(refindxSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gwasindx(gwasindxSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Geno_gwas(pBigMat, gwasgeno, refindx, gwasindx, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Chr
SEXP tXXmat_Chr(SEXP pBigMat, const NumericVector chr, const Nullable<double> chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Chr(SEXP pBigMatSEXP, SEXP chrSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Chr(pBigMat, chr, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Chr_gwas
SEXP tXXmat_Chr_gwas(SEXP pBigMat, const NumericVector chr, SEXP gwasgeno, const NumericVector gwaschr, const LogicalVector refindx, const NumericVector gwasindx, const Nullable<double> chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Chr_gwas(SEXP pBigMatSEXP, SEXP chrSEXP, SEXP gwasgenoSEXP, SEXP gwaschrSEXP, SEXP refindxSEXP, SEXP gwasindxSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gwasgeno(gwasgenoSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gwaschr(gwaschrSEXP);
    Rcpp::traits::input_parameter< const LogicalVector >::type refindx(refindxSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gwasindx(gwasindxSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Chr_gwas(pBigMat, chr, gwasgeno, gwaschr, refindx, gwasindx, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hibayes_BayesRR", (DL_FUNC) &_hibayes_BayesRR, 16},
    {"_hibayes_BayesA", (DL_FUNC) &_hibayes_BayesA, 15},
    {"_hibayes_BayesBpi", (DL_FUNC) &_hibayes_BayesBpi, 17},
    {"_hibayes_BayesB", (DL_FUNC) &_hibayes_BayesB, 16},
    {"_hibayes_BayesCpi", (DL_FUNC) &_hibayes_BayesCpi, 17},
    {"_hibayes_BayesC", (DL_FUNC) &_hibayes_BayesC, 16},
    {"_hibayes_BayesLASSO", (DL_FUNC) &_hibayes_BayesLASSO, 15},
    {"_hibayes_BayesR", (DL_FUNC) &_hibayes_BayesR, 18},
    {"_hibayes_SBayesRR_den", (DL_FUNC) &_hibayes_SBayesRR_den, 14},
    {"_hibayes_SBayesA_den", (DL_FUNC) &_hibayes_SBayesA_den, 14},
    {"_hibayes_SBayesBpi_den", (DL_FUNC) &_hibayes_SBayesBpi_den, 16},
    {"_hibayes_SBayesB_den", (DL_FUNC) &_hibayes_SBayesB_den, 15},
    {"_hibayes_SBayesCpi_den", (DL_FUNC) &_hibayes_SBayesCpi_den, 16},
    {"_hibayes_SBayesC_den", (DL_FUNC) &_hibayes_SBayesC_den, 15},
    {"_hibayes_SBayesLASSO_den", (DL_FUNC) &_hibayes_SBayesLASSO_den, 14},
    {"_hibayes_SBayesR_den", (DL_FUNC) &_hibayes_SBayesR_den, 17},
    {"_hibayes_SBayesRR_spa", (DL_FUNC) &_hibayes_SBayesRR_spa, 14},
    {"_hibayes_SBayesA_spa", (DL_FUNC) &_hibayes_SBayesA_spa, 14},
    {"_hibayes_SBayesBpi_spa", (DL_FUNC) &_hibayes_SBayesBpi_spa, 16},
    {"_hibayes_SBayesB_spa", (DL_FUNC) &_hibayes_SBayesB_spa, 15},
    {"_hibayes_SBayesCpi_spa", (DL_FUNC) &_hibayes_SBayesCpi_spa, 16},
    {"_hibayes_SBayesC_spa", (DL_FUNC) &_hibayes_SBayesC_spa, 15},
    {"_hibayes_SBayesLASSO_spa", (DL_FUNC) &_hibayes_SBayesLASSO_spa, 14},
    {"_hibayes_SBayesR_spa", (DL_FUNC) &_hibayes_SBayesR_spa, 17},
    {"_hibayes_conjgt_spa", (DL_FUNC) &_hibayes_conjgt_spa, 6},
    {"_hibayes_conjgt_den", (DL_FUNC) &_hibayes_conjgt_den, 6},
    {"_hibayes_cutwind", (DL_FUNC) &_hibayes_cutwind, 3},
    {"_hibayes_rMap_c", (DL_FUNC) &_hibayes_rMap_c, 2},
    {"_hibayes_read_bed", (DL_FUNC) &_hibayes_read_bed, 6},
    {"_hibayes_BigStat", (DL_FUNC) &_hibayes_BigStat, 2},
    {"_hibayes_tXXmat_Geno", (DL_FUNC) &_hibayes_tXXmat_Geno, 4},
    {"_hibayes_tXXmat_Geno_gwas", (DL_FUNC) &_hibayes_tXXmat_Geno_gwas, 7},
    {"_hibayes_tXXmat_Chr", (DL_FUNC) &_hibayes_tXXmat_Chr, 5},
    {"_hibayes_tXXmat_Chr_gwas", (DL_FUNC) &_hibayes_tXXmat_Chr_gwas, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_hibayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
